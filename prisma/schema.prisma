generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

// 1. User Entity
model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String
  name        String
  profile     Profile?
  addresses   Address[]
  orders      Order[]
  reviews     Review[] 
  wishlist    WishlistItem[]
  cartItems   CartItem[]
  role        Role          @default(USER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// 2. Profile Entity
model Profile {
  id          Int      @id @default(autoincrement())
  bio         String?
  phoneNumber String?
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
}

// 3. Address Entity
model Address {
  id          Int      @id @default(autoincrement())
  street      String
  city        String
  state       String
  zipCode     String
  country     String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  type        AddressType @default(SHIPPING)
  orders Order[]
}

// 4. Product Entity
model Product {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  price       Float
  stock       Int
  images      ProductImage[]
  categoryId  Int
  category    Category       @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]
  cartItems   CartItem[] 
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// 5. ProductImage Entity
model ProductImage {
  id         Int     @id @default(autoincrement())
  url        String
  altText    String?
  productId  Int
  product    Product @relation(fields: [productId], references: [id])
}

// 6. Category Entity
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  parentId Int?      
  parent   Category? @relation("CategoryToParent", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToParent") 
  products Product[] 
}

// 7. Order Entity
model Order {
  id         Int             @id @default(autoincrement())
  userId     Int
  user       User            @relation(fields: [userId], references: [id])
  orderItems OrderItem[]     
  status     OrderStatus     @default(PENDING)
  payment    Payment?
  addressId  Int
  address    Address         @relation(fields: [addressId], references: [id])
  createdAt  DateTime        @default(now())
}

// 8. OrderItem Entity
model OrderItem {
  id        Int        @id @default(autoincrement())
  orderId   Int
  order     Order      @relation(fields: [orderId], references: [id])
  productId Int
  product   Product    @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float      
}

// 9. Review Entity
model Review {
  id        Int       @id @default(autoincrement())
  rating    Int       @default(1)
  comment   String?
  userId    Int
  productId Int
  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
}

// 10. WishlistItem Entity
model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  addedAt   DateTime @default(now())
}

// 11. CartItem Entity
model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  addedAt   DateTime @default(now())
}

// 12. Payment Entity
model Payment {
  id           Int         @id @default(autoincrement())
  amount       Float
  paymentDate  DateTime    @default(now())
  status       PaymentStatus @default(PENDING)
  orderId      Int         @unique
  order        Order       @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AddressType {
  SHIPPING
  BILLING
}
enum Role {
  USER
  ADMIN
  SELLER
}

